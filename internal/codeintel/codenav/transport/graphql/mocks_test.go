// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"

	codenav "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	gitserver "github.com/sourcegraph/sourcegraph/internal/codeintel/stores/gitserver"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockGitTreeTranslator is a mock implementation of the GitTreeTranslator
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockGitTreeTranslator struct {
	// GetTargetCommitPathFromSourcePathFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetTargetCommitPathFromSourcePath.
	GetTargetCommitPathFromSourcePathFunc *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc
	// GetTargetCommitPositionFromSourcePositionFunc is an instance of a
	// mock function object controlling the behavior of the method
	// GetTargetCommitPositionFromSourcePosition.
	GetTargetCommitPositionFromSourcePositionFunc *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc
	// GetTargetCommitRangeFromSourceRangeFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetTargetCommitRangeFromSourceRange.
	GetTargetCommitRangeFromSourceRangeFunc *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc
}

// NewMockGitTreeTranslator creates a new mock of the GitTreeTranslator
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetTargetCommitPathFromSourcePathFunc: &GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc{
			defaultHook: func(context.Context, string, string, bool) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: func(context.Context, string, shared.Position, bool) (r0 string, r1 shared.Position, r2 bool, r3 error) {
				return
			},
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: func(context.Context, string, string, shared.Range, bool) (r0 string, r1 shared.Range, r2 bool, r3 error) {
				return
			},
		},
	}
}

// NewStrictMockGitTreeTranslator creates a new mock of the
// GitTreeTranslator interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetTargetCommitPathFromSourcePathFunc: &GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc{
			defaultHook: func(context.Context, string, string, bool) (string, bool, error) {
				panic("unexpected invocation of MockGitTreeTranslator.GetTargetCommitPathFromSourcePath")
			},
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error) {
				panic("unexpected invocation of MockGitTreeTranslator.GetTargetCommitPositionFromSourcePosition")
			},
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error) {
				panic("unexpected invocation of MockGitTreeTranslator.GetTargetCommitRangeFromSourceRange")
			},
		},
	}
}

// NewMockGitTreeTranslatorFrom creates a new mock of the
// MockGitTreeTranslator interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitTreeTranslatorFrom(i GitTreeTranslator) *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetTargetCommitPathFromSourcePathFunc: &GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc{
			defaultHook: i.GetTargetCommitPathFromSourcePath,
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: i.GetTargetCommitPositionFromSourcePosition,
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: i.GetTargetCommitRangeFromSourceRange,
		},
	}
}

// GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc describes the
// behavior when the GetTargetCommitPathFromSourcePath method of the parent
// MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc struct {
	defaultHook func(context.Context, string, string, bool) (string, bool, error)
	hooks       []func(context.Context, string, string, bool) (string, bool, error)
	history     []GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall
	mutex       sync.Mutex
}

// GetTargetCommitPathFromSourcePath delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockGitTreeTranslator) GetTargetCommitPathFromSourcePath(v0 context.Context, v1 string, v2 string, v3 bool) (string, bool, error) {
	r0, r1, r2 := m.GetTargetCommitPathFromSourcePathFunc.nextHook()(v0, v1, v2, v3)
	m.GetTargetCommitPathFromSourcePathFunc.appendCall(GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetTargetCommitPathFromSourcePath method of the parent
// MockGitTreeTranslator instance is invoked and the hook queue is empty.
func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) SetDefaultHook(hook func(context.Context, string, string, bool) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTargetCommitPathFromSourcePath method of the parent
// MockGitTreeTranslator instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) PushHook(hook func(context.Context, string, string, bool) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, bool) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, bool) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) nextHook() func(context.Context, string, string, bool) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) appendCall(r0 GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall objects
// describing the invocations of this function.
func (f *GitTreeTranslatorGetTargetCommitPathFromSourcePathFunc) History() []GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall is an object
// that describes an invocation of method GetTargetCommitPathFromSourcePath
// on an instance of MockGitTreeTranslator.
type GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPathFromSourcePathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc describes
// the behavior when the GetTargetCommitPositionFromSourcePosition method of
// the parent MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc struct {
	defaultHook func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error)
	hooks       []func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error)
	history     []GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall
	mutex       sync.Mutex
}

// GetTargetCommitPositionFromSourcePosition delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockGitTreeTranslator) GetTargetCommitPositionFromSourcePosition(v0 context.Context, v1 string, v2 shared.Position, v3 bool) (string, shared.Position, bool, error) {
	r0, r1, r2, r3 := m.GetTargetCommitPositionFromSourcePositionFunc.nextHook()(v0, v1, v2, v3)
	m.GetTargetCommitPositionFromSourcePositionFunc.appendCall(GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetTargetCommitPositionFromSourcePosition method of the parent
// MockGitTreeTranslator instance is invoked and the hook queue is empty.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) SetDefaultHook(hook func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTargetCommitPositionFromSourcePosition method of the parent
// MockGitTreeTranslator instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) PushHook(hook func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) SetDefaultReturn(r0 string, r1 shared.Position, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) PushReturn(r0 string, r1 shared.Position, r2 bool, r3 error) {
	f.PushHook(func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) nextHook() func(context.Context, string, shared.Position, bool) (string, shared.Position, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) appendCall(r0 GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall
// objects describing the invocations of this function.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) History() []GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall is an
// object that describes an invocation of method
// GetTargetCommitPositionFromSourcePosition on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 shared.Position
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.Position
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc describes the
// behavior when the GetTargetCommitRangeFromSourceRange method of the
// parent MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc struct {
	defaultHook func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error)
	hooks       []func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error)
	history     []GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall
	mutex       sync.Mutex
}

// GetTargetCommitRangeFromSourceRange delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockGitTreeTranslator) GetTargetCommitRangeFromSourceRange(v0 context.Context, v1 string, v2 string, v3 shared.Range, v4 bool) (string, shared.Range, bool, error) {
	r0, r1, r2, r3 := m.GetTargetCommitRangeFromSourceRangeFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetTargetCommitRangeFromSourceRangeFunc.appendCall(GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall{v0, v1, v2, v3, v4, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetTargetCommitRangeFromSourceRange method of the parent
// MockGitTreeTranslator instance is invoked and the hook queue is empty.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) SetDefaultHook(hook func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTargetCommitRangeFromSourceRange method of the parent
// MockGitTreeTranslator instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) PushHook(hook func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) SetDefaultReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) PushReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) nextHook() func(context.Context, string, string, shared.Range, bool) (string, shared.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) appendCall(r0 GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall objects
// describing the invocations of this function.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) History() []GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall is an object
// that describes an invocation of method
// GetTargetCommitRangeFromSourceRange on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared.Range
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockGitserverClient struct {
	// CommitsExistFunc is an instance of a mock function object controlling
	// the behavior of the method CommitsExist.
	CommitsExistFunc *GitserverClientCommitsExistFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) (r0 []bool, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsExist")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: i.CommitsExist,
		},
	}
}

// GitserverClientCommitsExistFunc describes the behavior when the
// CommitsExist method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientCommitsExistFunc struct {
	defaultHook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	hooks       []func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	history     []GitserverClientCommitsExistFuncCall
	mutex       sync.Mutex
}

// CommitsExist delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsExist(v0 context.Context, v1 []gitserver.RepositoryCommit) ([]bool, error) {
	r0, r1 := m.CommitsExistFunc.nextHook()(v0, v1)
	m.CommitsExistFunc.appendCall(GitserverClientCommitsExistFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitsExist method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitsExistFunc) SetDefaultHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsExist method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientCommitsExistFunc) PushHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsExistFunc) SetDefaultReturn(r0 []bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsExistFunc) PushReturn(r0 []bool, r1 error) {
	f.PushHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsExistFunc) nextHook() func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsExistFunc) appendCall(r0 GitserverClientCommitsExistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitsExistFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitsExistFunc) History() []GitserverClientCommitsExistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsExistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsExistFuncCall is an object that describes an
// invocation of method CommitsExist on an instance of MockGitserverClient.
type GitserverClientCommitsExistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []gitserver.RepositoryCommit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockService is a mock implementation of the Service interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockService struct {
	// GetBulkMonikerLocationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetBulkMonikerLocations.
	GetBulkMonikerLocationsFunc *ServiceGetBulkMonikerLocationsFunc
	// GetDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefinitions.
	GetDefinitionsFunc *ServiceGetDefinitionsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *ServiceGetDiagnosticsFunc
	// GetDumpsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDumpsByIDs.
	GetDumpsByIDsFunc *ServiceGetDumpsByIDsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *ServiceGetHoverFunc
	// GetImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetImplementations.
	GetImplementationsFunc *ServiceGetImplementationsFunc
	// GetMonikersByPositionFunc is an instance of a mock function object
	// controlling the behavior of the method GetMonikersByPosition.
	GetMonikersByPositionFunc *ServiceGetMonikersByPositionFunc
	// GetPackageInformationFunc is an instance of a mock function object
	// controlling the behavior of the method GetPackageInformation.
	GetPackageInformationFunc *ServiceGetPackageInformationFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *ServiceGetRangesFunc
	// GetReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method GetReferences.
	GetReferencesFunc *ServiceGetReferencesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *ServiceGetStencilFunc
	// GetUploadIDsWithReferencesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadIDsWithReferences.
	GetUploadIDsWithReferencesFunc *ServiceGetUploadIDsWithReferencesFunc
	// GetUploadsWithDefinitionsForMonikersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetUploadsWithDefinitionsForMonikers.
	GetUploadsWithDefinitionsForMonikersFunc *ServiceGetUploadsWithDefinitionsForMonikersFunc
}

// NewMockService creates a new mock of the Service interface. All methods
// return zero values for all results, unless overwritten.
func NewMockService() *MockService {
	return &MockService{
		GetBulkMonikerLocationsFunc: &ServiceGetBulkMonikerLocationsFunc{
			defaultHook: func(context.Context, string, []int, []precise.MonikerData, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetDefinitionsFunc: &ServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetDiagnosticsFunc: &ServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 []shared.Diagnostic, r1 int, r2 error) {
				return
			},
		},
		GetDumpsByIDsFunc: &ServiceGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetHoverFunc: &ServiceGetHoverFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 string, r1 shared.Range, r2 bool, r3 error) {
				return
			},
		},
		GetImplementationsFunc: &ServiceGetImplementationsFunc{
			defaultHook: func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) (r0 []shared.UploadLocation, r1 shared.ImplementationsCursor, r2 error) {
				return
			},
		},
		GetMonikersByPositionFunc: &ServiceGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 [][]precise.MonikerData, r1 error) {
				return
			},
		},
		GetPackageInformationFunc: &ServiceGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string, string) (r0 precise.PackageInformationData, r1 bool, r2 error) {
				return
			},
		},
		GetRangesFunc: &ServiceGetRangesFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 []shared.CodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetReferencesFunc: &ServiceGetReferencesFunc{
			defaultHook: func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) (r0 []shared.UploadLocation, r1 shared.ReferencesCursor, r2 error) {
				return
			},
		},
		GetStencilFunc: &ServiceGetStencilFunc{
			defaultHook: func(context.Context, int, string) (r0 []shared.Range, r1 error) {
				return
			},
		},
		GetUploadIDsWithReferencesFunc: &ServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) (r0 []int, r1 int, r2 int, r3 error) {
				return
			},
		},
		GetUploadsWithDefinitionsForMonikersFunc: &ServiceGetUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) (r0 []shared.Dump, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockService creates a new mock of the Service interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockService() *MockService {
	return &MockService{
		GetBulkMonikerLocationsFunc: &ServiceGetBulkMonikerLocationsFunc{
			defaultHook: func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockService.GetBulkMonikerLocations")
			},
		},
		GetDefinitionsFunc: &ServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockService.GetDefinitions")
			},
		},
		GetDiagnosticsFunc: &ServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
				panic("unexpected invocation of MockService.GetDiagnostics")
			},
		},
		GetDumpsByIDsFunc: &ServiceGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) ([]shared.Dump, error) {
				panic("unexpected invocation of MockService.GetDumpsByIDs")
			},
		},
		GetHoverFunc: &ServiceGetHoverFunc{
			defaultHook: func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
				panic("unexpected invocation of MockService.GetHover")
			},
		},
		GetImplementationsFunc: &ServiceGetImplementationsFunc{
			defaultHook: func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error) {
				panic("unexpected invocation of MockService.GetImplementations")
			},
		},
		GetMonikersByPositionFunc: &ServiceGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
				panic("unexpected invocation of MockService.GetMonikersByPosition")
			},
		},
		GetPackageInformationFunc: &ServiceGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
				panic("unexpected invocation of MockService.GetPackageInformation")
			},
		},
		GetRangesFunc: &ServiceGetRangesFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
				panic("unexpected invocation of MockService.GetRanges")
			},
		},
		GetReferencesFunc: &ServiceGetReferencesFunc{
			defaultHook: func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error) {
				panic("unexpected invocation of MockService.GetReferences")
			},
		},
		GetStencilFunc: &ServiceGetStencilFunc{
			defaultHook: func(context.Context, int, string) ([]shared.Range, error) {
				panic("unexpected invocation of MockService.GetStencil")
			},
		},
		GetUploadIDsWithReferencesFunc: &ServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
				panic("unexpected invocation of MockService.GetUploadIDsWithReferences")
			},
		},
		GetUploadsWithDefinitionsForMonikersFunc: &ServiceGetUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
				panic("unexpected invocation of MockService.GetUploadsWithDefinitionsForMonikers")
			},
		},
	}
}

// NewMockServiceFrom creates a new mock of the MockService interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockServiceFrom(i Service) *MockService {
	return &MockService{
		GetBulkMonikerLocationsFunc: &ServiceGetBulkMonikerLocationsFunc{
			defaultHook: i.GetBulkMonikerLocations,
		},
		GetDefinitionsFunc: &ServiceGetDefinitionsFunc{
			defaultHook: i.GetDefinitions,
		},
		GetDiagnosticsFunc: &ServiceGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetDumpsByIDsFunc: &ServiceGetDumpsByIDsFunc{
			defaultHook: i.GetDumpsByIDs,
		},
		GetHoverFunc: &ServiceGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetImplementationsFunc: &ServiceGetImplementationsFunc{
			defaultHook: i.GetImplementations,
		},
		GetMonikersByPositionFunc: &ServiceGetMonikersByPositionFunc{
			defaultHook: i.GetMonikersByPosition,
		},
		GetPackageInformationFunc: &ServiceGetPackageInformationFunc{
			defaultHook: i.GetPackageInformation,
		},
		GetRangesFunc: &ServiceGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetReferencesFunc: &ServiceGetReferencesFunc{
			defaultHook: i.GetReferences,
		},
		GetStencilFunc: &ServiceGetStencilFunc{
			defaultHook: i.GetStencil,
		},
		GetUploadIDsWithReferencesFunc: &ServiceGetUploadIDsWithReferencesFunc{
			defaultHook: i.GetUploadIDsWithReferences,
		},
		GetUploadsWithDefinitionsForMonikersFunc: &ServiceGetUploadsWithDefinitionsForMonikersFunc{
			defaultHook: i.GetUploadsWithDefinitionsForMonikers,
		},
	}
}

// ServiceGetBulkMonikerLocationsFunc describes the behavior when the
// GetBulkMonikerLocations method of the parent MockService instance is
// invoked.
type ServiceGetBulkMonikerLocationsFunc struct {
	defaultHook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)
	history     []ServiceGetBulkMonikerLocationsFuncCall
	mutex       sync.Mutex
}

// GetBulkMonikerLocations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockService) GetBulkMonikerLocations(v0 context.Context, v1 string, v2 []int, v3 []precise.MonikerData, v4 int, v5 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetBulkMonikerLocationsFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetBulkMonikerLocationsFunc.appendCall(ServiceGetBulkMonikerLocationsFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetBulkMonikerLocations method of the parent MockService instance is
// invoked and the hook queue is empty.
func (f *ServiceGetBulkMonikerLocationsFunc) SetDefaultHook(hook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBulkMonikerLocations method of the parent MockService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ServiceGetBulkMonikerLocationsFunc) PushHook(hook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetBulkMonikerLocationsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetBulkMonikerLocationsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetBulkMonikerLocationsFunc) nextHook() func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetBulkMonikerLocationsFunc) appendCall(r0 ServiceGetBulkMonikerLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetBulkMonikerLocationsFuncCall
// objects describing the invocations of this function.
func (f *ServiceGetBulkMonikerLocationsFunc) History() []ServiceGetBulkMonikerLocationsFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetBulkMonikerLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetBulkMonikerLocationsFuncCall is an object that describes an
// invocation of method GetBulkMonikerLocations on an instance of
// MockService.
type ServiceGetBulkMonikerLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []precise.MonikerData
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetBulkMonikerLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetBulkMonikerLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetDefinitionsFunc describes the behavior when the GetDefinitions
// method of the parent MockService instance is invoked.
type ServiceGetDefinitionsFunc struct {
	defaultHook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	history     []ServiceGetDefinitionsFuncCall
	mutex       sync.Mutex
}

// GetDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) GetDefinitions(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetDefinitionsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetDefinitionsFunc.appendCall(ServiceGetDefinitionsFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDefinitions
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceGetDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefinitions method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetDefinitionsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetDefinitionsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetDefinitionsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetDefinitionsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetDefinitionsFunc) appendCall(r0 ServiceGetDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetDefinitionsFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetDefinitionsFunc) History() []ServiceGetDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetDefinitionsFuncCall is an object that describes an invocation
// of method GetDefinitions on an instance of MockService.
type ServiceGetDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetDiagnosticsFunc describes the behavior when the GetDiagnostics
// method of the parent MockService instance is invoked.
type ServiceGetDiagnosticsFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)
	hooks       []func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)
	history     []ServiceGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) GetDiagnostics(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]shared.Diagnostic, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetDiagnosticsFunc.appendCall(ServiceGetDiagnosticsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetDiagnosticsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetDiagnosticsFunc) SetDefaultReturn(r0 []shared.Diagnostic, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetDiagnosticsFunc) PushReturn(r0 []shared.Diagnostic, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetDiagnosticsFunc) nextHook() func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetDiagnosticsFunc) appendCall(r0 ServiceGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetDiagnosticsFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetDiagnosticsFunc) History() []ServiceGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetDiagnosticsFuncCall is an object that describes an invocation
// of method GetDiagnostics on an instance of MockService.
type ServiceGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Diagnostic
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetDumpsByIDsFunc describes the behavior when the GetDumpsByIDs
// method of the parent MockService instance is invoked.
type ServiceGetDumpsByIDsFunc struct {
	defaultHook func(context.Context, []int) ([]shared.Dump, error)
	hooks       []func(context.Context, []int) ([]shared.Dump, error)
	history     []ServiceGetDumpsByIDsFuncCall
	mutex       sync.Mutex
}

// GetDumpsByIDs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockService) GetDumpsByIDs(v0 context.Context, v1 []int) ([]shared.Dump, error) {
	r0, r1 := m.GetDumpsByIDsFunc.nextHook()(v0, v1)
	m.GetDumpsByIDsFunc.appendCall(ServiceGetDumpsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDumpsByIDs method
// of the parent MockService instance is invoked and the hook queue is
// empty.
func (f *ServiceGetDumpsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpsByIDs method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetDumpsByIDsFunc) PushHook(hook func(context.Context, []int) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetDumpsByIDsFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetDumpsByIDsFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, []int) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *ServiceGetDumpsByIDsFunc) nextHook() func(context.Context, []int) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetDumpsByIDsFunc) appendCall(r0 ServiceGetDumpsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetDumpsByIDsFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetDumpsByIDsFunc) History() []ServiceGetDumpsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetDumpsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetDumpsByIDsFuncCall is an object that describes an invocation of
// method GetDumpsByIDs on an instance of MockService.
type ServiceGetDumpsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetDumpsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetDumpsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceGetHoverFunc describes the behavior when the GetHover method of
// the parent MockService instance is invoked.
type ServiceGetHoverFunc struct {
	defaultHook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)
	hooks       []func(context.Context, int, string, int, int) (string, shared.Range, bool, error)
	history     []ServiceGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockService) GetHover(v0 context.Context, v1 int, v2 string, v3 int, v4 int) (string, shared.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetHoverFunc.appendCall(ServiceGetHoverFuncCall{v0, v1, v2, v3, v4, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockService instance is invoked and the hook queue is empty.
func (f *ServiceGetHoverFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetHoverFunc) PushHook(hook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetHoverFunc) SetDefaultReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetHoverFunc) PushReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *ServiceGetHoverFunc) nextHook() func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetHoverFunc) appendCall(r0 ServiceGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetHoverFuncCall objects describing
// the invocations of this function.
func (f *ServiceGetHoverFunc) History() []ServiceGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetHoverFuncCall is an object that describes an invocation of
// method GetHover on an instance of MockService.
type ServiceGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ServiceGetImplementationsFunc describes the behavior when the
// GetImplementations method of the parent MockService instance is invoked.
type ServiceGetImplementationsFunc struct {
	defaultHook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error)
	hooks       []func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error)
	history     []ServiceGetImplementationsFuncCall
	mutex       sync.Mutex
}

// GetImplementations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) GetImplementations(v0 context.Context, v1 shared.RequestArgs, v2 codenav.RequestState, v3 shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error) {
	r0, r1, r2 := m.GetImplementationsFunc.nextHook()(v0, v1, v2, v3)
	m.GetImplementationsFunc.appendCall(ServiceGetImplementationsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetImplementations
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceGetImplementationsFunc) SetDefaultHook(hook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementations method of the parent MockService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ServiceGetImplementationsFunc) PushHook(hook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetImplementationsFunc) SetDefaultReturn(r0 []shared.UploadLocation, r1 shared.ImplementationsCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetImplementationsFunc) PushReturn(r0 []shared.UploadLocation, r1 shared.ImplementationsCursor, r2 error) {
	f.PushHook(func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetImplementationsFunc) nextHook() func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ImplementationsCursor) ([]shared.UploadLocation, shared.ImplementationsCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetImplementationsFunc) appendCall(r0 ServiceGetImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetImplementationsFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetImplementationsFunc) History() []ServiceGetImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetImplementationsFuncCall is an object that describes an
// invocation of method GetImplementations on an instance of MockService.
type ServiceGetImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared.ImplementationsCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.ImplementationsCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetMonikersByPositionFunc describes the behavior when the
// GetMonikersByPosition method of the parent MockService instance is
// invoked.
type ServiceGetMonikersByPositionFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)
	hooks       []func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)
	history     []ServiceGetMonikersByPositionFuncCall
	mutex       sync.Mutex
}

// GetMonikersByPosition delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockService) GetMonikersByPosition(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([][]precise.MonikerData, error) {
	r0, r1 := m.GetMonikersByPositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetMonikersByPositionFunc.appendCall(ServiceGetMonikersByPositionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMonikersByPosition method of the parent MockService instance is
// invoked and the hook queue is empty.
func (f *ServiceGetMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMonikersByPosition method of the parent MockService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ServiceGetMonikersByPositionFunc) PushHook(hook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetMonikersByPositionFunc) SetDefaultReturn(r0 [][]precise.MonikerData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetMonikersByPositionFunc) PushReturn(r0 [][]precise.MonikerData, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

func (f *ServiceGetMonikersByPositionFunc) nextHook() func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetMonikersByPositionFunc) appendCall(r0 ServiceGetMonikersByPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetMonikersByPositionFuncCall
// objects describing the invocations of this function.
func (f *ServiceGetMonikersByPositionFunc) History() []ServiceGetMonikersByPositionFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetMonikersByPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetMonikersByPositionFuncCall is an object that describes an
// invocation of method GetMonikersByPosition on an instance of MockService.
type ServiceGetMonikersByPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][]precise.MonikerData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetMonikersByPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetMonikersByPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceGetPackageInformationFunc describes the behavior when the
// GetPackageInformation method of the parent MockService instance is
// invoked.
type ServiceGetPackageInformationFunc struct {
	defaultHook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)
	hooks       []func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)
	history     []ServiceGetPackageInformationFuncCall
	mutex       sync.Mutex
}

// GetPackageInformation delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockService) GetPackageInformation(v0 context.Context, v1 int, v2 string, v3 string) (precise.PackageInformationData, bool, error) {
	r0, r1, r2 := m.GetPackageInformationFunc.nextHook()(v0, v1, v2, v3)
	m.GetPackageInformationFunc.appendCall(ServiceGetPackageInformationFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetPackageInformation method of the parent MockService instance is
// invoked and the hook queue is empty.
func (f *ServiceGetPackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPackageInformation method of the parent MockService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ServiceGetPackageInformationFunc) PushHook(hook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetPackageInformationFunc) SetDefaultReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetPackageInformationFunc) PushReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetPackageInformationFunc) nextHook() func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetPackageInformationFunc) appendCall(r0 ServiceGetPackageInformationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetPackageInformationFuncCall
// objects describing the invocations of this function.
func (f *ServiceGetPackageInformationFunc) History() []ServiceGetPackageInformationFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetPackageInformationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetPackageInformationFuncCall is an object that describes an
// invocation of method GetPackageInformation on an instance of MockService.
type ServiceGetPackageInformationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 precise.PackageInformationData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetPackageInformationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetPackageInformationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetRangesFunc describes the behavior when the GetRanges method of
// the parent MockService instance is invoked.
type ServiceGetRangesFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)
	hooks       []func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)
	history     []ServiceGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockService) GetRanges(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]shared.CodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(ServiceGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockService instance is invoked and the hook queue is empty.
func (f *ServiceGetRangesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetRangesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetRangesFunc) SetDefaultReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetRangesFunc) PushReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *ServiceGetRangesFunc) nextHook() func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetRangesFunc) appendCall(r0 ServiceGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetRangesFuncCall objects describing
// the invocations of this function.
func (f *ServiceGetRangesFunc) History() []ServiceGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetRangesFuncCall is an object that describes an invocation of
// method GetRanges on an instance of MockService.
type ServiceGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceGetReferencesFunc describes the behavior when the GetReferences
// method of the parent MockService instance is invoked.
type ServiceGetReferencesFunc struct {
	defaultHook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error)
	hooks       []func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error)
	history     []ServiceGetReferencesFuncCall
	mutex       sync.Mutex
}

// GetReferences delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockService) GetReferences(v0 context.Context, v1 shared.RequestArgs, v2 codenav.RequestState, v3 shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error) {
	r0, r1, r2 := m.GetReferencesFunc.nextHook()(v0, v1, v2, v3)
	m.GetReferencesFunc.appendCall(ServiceGetReferencesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetReferences method
// of the parent MockService instance is invoked and the hook queue is
// empty.
func (f *ServiceGetReferencesFunc) SetDefaultHook(hook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferences method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetReferencesFunc) PushHook(hook func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetReferencesFunc) SetDefaultReturn(r0 []shared.UploadLocation, r1 shared.ReferencesCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetReferencesFunc) PushReturn(r0 []shared.UploadLocation, r1 shared.ReferencesCursor, r2 error) {
	f.PushHook(func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

func (f *ServiceGetReferencesFunc) nextHook() func(context.Context, shared.RequestArgs, codenav.RequestState, shared.ReferencesCursor) ([]shared.UploadLocation, shared.ReferencesCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetReferencesFunc) appendCall(r0 ServiceGetReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetReferencesFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetReferencesFunc) History() []ServiceGetReferencesFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetReferencesFuncCall is an object that describes an invocation of
// method GetReferences on an instance of MockService.
type ServiceGetReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared.ReferencesCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.ReferencesCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceGetStencilFunc describes the behavior when the GetStencil method
// of the parent MockService instance is invoked.
type ServiceGetStencilFunc struct {
	defaultHook func(context.Context, int, string) ([]shared.Range, error)
	hooks       []func(context.Context, int, string) ([]shared.Range, error)
	history     []ServiceGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockService) GetStencil(v0 context.Context, v1 int, v2 string) ([]shared.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(ServiceGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockService instance is invoked and the hook queue is empty.
func (f *ServiceGetStencilFunc) SetDefaultHook(hook func(context.Context, int, string) ([]shared.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGetStencilFunc) PushHook(hook func(context.Context, int, string) ([]shared.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetStencilFunc) SetDefaultReturn(r0 []shared.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]shared.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetStencilFunc) PushReturn(r0 []shared.Range, r1 error) {
	f.PushHook(func(context.Context, int, string) ([]shared.Range, error) {
		return r0, r1
	})
}

func (f *ServiceGetStencilFunc) nextHook() func(context.Context, int, string) ([]shared.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetStencilFunc) appendCall(r0 ServiceGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetStencilFuncCall objects
// describing the invocations of this function.
func (f *ServiceGetStencilFunc) History() []ServiceGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetStencilFuncCall is an object that describes an invocation of
// method GetStencil on an instance of MockService.
type ServiceGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceGetUploadIDsWithReferencesFunc describes the behavior when the
// GetUploadIDsWithReferences method of the parent MockService instance is
// invoked.
type ServiceGetUploadIDsWithReferencesFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	history     []ServiceGetUploadIDsWithReferencesFuncCall
	mutex       sync.Mutex
}

// GetUploadIDsWithReferences delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockService) GetUploadIDsWithReferences(v0 context.Context, v1 []precise.QualifiedMonikerData, v2 []int, v3 int, v4 string, v5 int, v6 int) ([]int, int, int, error) {
	r0, r1, r2, r3 := m.GetUploadIDsWithReferencesFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetUploadIDsWithReferencesFunc.appendCall(ServiceGetUploadIDsWithReferencesFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetUploadIDsWithReferences method of the parent MockService instance is
// invoked and the hook queue is empty.
func (f *ServiceGetUploadIDsWithReferencesFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadIDsWithReferences method of the parent MockService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ServiceGetUploadIDsWithReferencesFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetUploadIDsWithReferencesFunc) SetDefaultReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetUploadIDsWithReferencesFunc) PushReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ServiceGetUploadIDsWithReferencesFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetUploadIDsWithReferencesFunc) appendCall(r0 ServiceGetUploadIDsWithReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGetUploadIDsWithReferencesFuncCall
// objects describing the invocations of this function.
func (f *ServiceGetUploadIDsWithReferencesFunc) History() []ServiceGetUploadIDsWithReferencesFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetUploadIDsWithReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetUploadIDsWithReferencesFuncCall is an object that describes an
// invocation of method GetUploadIDsWithReferences on an instance of
// MockService.
type ServiceGetUploadIDsWithReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetUploadIDsWithReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetUploadIDsWithReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ServiceGetUploadsWithDefinitionsForMonikersFunc describes the behavior
// when the GetUploadsWithDefinitionsForMonikers method of the parent
// MockService instance is invoked.
type ServiceGetUploadsWithDefinitionsForMonikersFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)
	history     []ServiceGetUploadsWithDefinitionsForMonikersFuncCall
	mutex       sync.Mutex
}

// GetUploadsWithDefinitionsForMonikers delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockService) GetUploadsWithDefinitionsForMonikers(v0 context.Context, v1 []precise.QualifiedMonikerData) ([]shared.Dump, error) {
	r0, r1 := m.GetUploadsWithDefinitionsForMonikersFunc.nextHook()(v0, v1)
	m.GetUploadsWithDefinitionsForMonikersFunc.appendCall(ServiceGetUploadsWithDefinitionsForMonikersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetUploadsWithDefinitionsForMonikers method of the parent MockService
// instance is invoked and the hook queue is empty.
func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsWithDefinitionsForMonikers method of the parent MockService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) appendCall(r0 ServiceGetUploadsWithDefinitionsForMonikersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ServiceGetUploadsWithDefinitionsForMonikersFuncCall objects describing
// the invocations of this function.
func (f *ServiceGetUploadsWithDefinitionsForMonikersFunc) History() []ServiceGetUploadsWithDefinitionsForMonikersFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGetUploadsWithDefinitionsForMonikersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGetUploadsWithDefinitionsForMonikersFuncCall is an object that
// describes an invocation of method GetUploadsWithDefinitionsForMonikers on
// an instance of MockService.
type ServiceGetUploadsWithDefinitionsForMonikersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGetUploadsWithDefinitionsForMonikersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGetUploadsWithDefinitionsForMonikersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
