// Code generated by go-mockgen 1.3.4; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"
	"time"

	diff "github.com/sourcegraph/go-diff/diff"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	gitserver "github.com/sourcegraph/sourcegraph/internal/codeintel/stores/gitserver"
	types "github.com/sourcegraph/sourcegraph/internal/codeintel/types"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockAutoIndexingService struct {
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *AutoIndexingServiceGetIndexByIDFunc
	// GetIndexesFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexes.
	GetIndexesFunc *AutoIndexingServiceGetIndexesFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *AutoIndexingServiceGetIndexesByIDsFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *AutoIndexingServiceGetListTagsFunc
	// GetUnsafeDBFunc is an instance of a mock function object controlling
	// the behavior of the method GetUnsafeDB.
	GetUnsafeDBFunc *AutoIndexingServiceGetUnsafeDBFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 types.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, types.GetIndexesOptions) (r0 []types.Index, r1 int, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Index, r1 error) {
				return
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (types.Index, bool, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexByID")
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexes")
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Index, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexesByIDs")
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetListTags")
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockAutoIndexingService.GetUnsafeDB")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: i.GetIndexes,
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: i.GetUnsafeDB,
		},
	}
}

// AutoIndexingServiceGetIndexByIDFunc describes the behavior when the
// GetIndexByID method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (types.Index, bool, error)
	hooks       []func(context.Context, int) (types.Index, bool, error)
	history     []AutoIndexingServiceGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexByID(v0 context.Context, v1 int) (types.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(AutoIndexingServiceGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultReturn(r0 types.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushReturn(r0 types.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexByIDFunc) nextHook() func(context.Context, int) (types.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexByIDFunc) appendCall(r0 AutoIndexingServiceGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexByIDFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexByIDFunc) History() []AutoIndexingServiceGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexByIDFuncCall is an object that describes an
// invocation of method GetIndexByID on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesFunc describes the behavior when the
// GetIndexes method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesFunc struct {
	defaultHook func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error)
	hooks       []func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error)
	history     []AutoIndexingServiceGetIndexesFuncCall
	mutex       sync.Mutex
}

// GetIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexes(v0 context.Context, v1 types.GetIndexesOptions) ([]types.Index, int, error) {
	r0, r1, r2 := m.GetIndexesFunc.nextHook()(v0, v1)
	m.GetIndexesFunc.appendCall(AutoIndexingServiceGetIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexes method of
// the parent MockAutoIndexingService instance is invoked and the hook queue
// is empty.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultHook(hook func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexes method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetIndexesFunc) PushHook(hook func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultReturn(r0 []types.Index, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesFunc) PushReturn(r0 []types.Index, r1 int, r2 error) {
	f.PushHook(func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexesFunc) nextHook() func(context.Context, types.GetIndexesOptions) ([]types.Index, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesFunc) appendCall(r0 AutoIndexingServiceGetIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesFunc) History() []AutoIndexingServiceGetIndexesFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesFuncCall is an object that describes an
// invocation of method GetIndexes on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Index, error)
	hooks       []func(context.Context, ...int) ([]types.Index, error)
	history     []AutoIndexingServiceGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]types.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(AutoIndexingServiceGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockAutoIndexingService instance is invoked and the
// hook queue is empty.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultReturn(r0 []types.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushReturn(r0 []types.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) appendCall(r0 AutoIndexingServiceGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesByIDsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) History() []AutoIndexingServiceGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesByIDsFuncCall is an object that describes an
// invocation of method GetIndexesByIDs on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetListTagsFunc describes the behavior when the
// GetListTags method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []AutoIndexingServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(AutoIndexingServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetListTagsFunc) appendCall(r0 AutoIndexingServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetListTagsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetListTagsFunc) History() []AutoIndexingServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetUnsafeDBFunc describes the behavior when the
// GetUnsafeDB method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetUnsafeDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []AutoIndexingServiceGetUnsafeDBFuncCall
	mutex       sync.Mutex
}

// GetUnsafeDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetUnsafeDB() database.DB {
	r0 := m.GetUnsafeDBFunc.nextHook()()
	m.GetUnsafeDBFunc.appendCall(AutoIndexingServiceGetUnsafeDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetUnsafeDB method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUnsafeDB method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) appendCall(r0 AutoIndexingServiceGetUnsafeDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetUnsafeDBFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetUnsafeDBFunc) History() []AutoIndexingServiceGetUnsafeDBFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetUnsafeDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetUnsafeDBFuncCall is an object that describes an
// invocation of method GetUnsafeDB on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetUnsafeDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitBlobLSIFDataResolverOLD is a mock implementation of the
// GitBlobLSIFDataResolverOLD interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockGitBlobLSIFDataResolverOLD struct {
	// DefinitionsFunc is an instance of a mock function object controlling
	// the behavior of the method Definitions.
	DefinitionsFunc *GitBlobLSIFDataResolverOLDDefinitionsFunc
	// DiagnosticsFunc is an instance of a mock function object controlling
	// the behavior of the method Diagnostics.
	DiagnosticsFunc *GitBlobLSIFDataResolverOLDDiagnosticsFunc
	// HoverFunc is an instance of a mock function object controlling the
	// behavior of the method Hover.
	HoverFunc *GitBlobLSIFDataResolverOLDHoverFunc
	// ImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method Implementations.
	ImplementationsFunc *GitBlobLSIFDataResolverOLDImplementationsFunc
	// LSIFUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method LSIFUploads.
	LSIFUploadsFunc *GitBlobLSIFDataResolverOLDLSIFUploadsFunc
	// RangesFunc is an instance of a mock function object controlling the
	// behavior of the method Ranges.
	RangesFunc *GitBlobLSIFDataResolverOLDRangesFunc
	// ReferencesFunc is an instance of a mock function object controlling
	// the behavior of the method References.
	ReferencesFunc *GitBlobLSIFDataResolverOLDReferencesFunc
	// StencilFunc is an instance of a mock function object controlling the
	// behavior of the method Stencil.
	StencilFunc *GitBlobLSIFDataResolverOLDStencilFunc
}

// NewMockGitBlobLSIFDataResolverOLD creates a new mock of the
// GitBlobLSIFDataResolverOLD interface. All methods return zero values for
// all results, unless overwritten.
func NewMockGitBlobLSIFDataResolverOLD() *MockGitBlobLSIFDataResolverOLD {
	return &MockGitBlobLSIFDataResolverOLD{
		DefinitionsFunc: &GitBlobLSIFDataResolverOLDDefinitionsFunc{
			defaultHook: func(context.Context, int, int) (r0 []types.UploadLocation, r1 error) {
				return
			},
		},
		DiagnosticsFunc: &GitBlobLSIFDataResolverOLDDiagnosticsFunc{
			defaultHook: func(context.Context, int) (r0 []shared.DiagnosticAtUpload, r1 int, r2 error) {
				return
			},
		},
		HoverFunc: &GitBlobLSIFDataResolverOLDHoverFunc{
			defaultHook: func(context.Context, int, int) (r0 string, r1 types.Range, r2 bool, r3 error) {
				return
			},
		},
		ImplementationsFunc: &GitBlobLSIFDataResolverOLDImplementationsFunc{
			defaultHook: func(context.Context, int, int, int, string) (r0 []types.UploadLocation, r1 string, r2 error) {
				return
			},
		},
		LSIFUploadsFunc: &GitBlobLSIFDataResolverOLDLSIFUploadsFunc{
			defaultHook: func(context.Context) (r0 []types.Dump, r1 error) {
				return
			},
		},
		RangesFunc: &GitBlobLSIFDataResolverOLDRangesFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.AdjustedCodeIntelligenceRange, r1 error) {
				return
			},
		},
		ReferencesFunc: &GitBlobLSIFDataResolverOLDReferencesFunc{
			defaultHook: func(context.Context, int, int, int, string) (r0 []types.UploadLocation, r1 string, r2 error) {
				return
			},
		},
		StencilFunc: &GitBlobLSIFDataResolverOLDStencilFunc{
			defaultHook: func(context.Context) (r0 []types.Range, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitBlobLSIFDataResolverOLD creates a new mock of the
// GitBlobLSIFDataResolverOLD interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitBlobLSIFDataResolverOLD() *MockGitBlobLSIFDataResolverOLD {
	return &MockGitBlobLSIFDataResolverOLD{
		DefinitionsFunc: &GitBlobLSIFDataResolverOLDDefinitionsFunc{
			defaultHook: func(context.Context, int, int) ([]types.UploadLocation, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Definitions")
			},
		},
		DiagnosticsFunc: &GitBlobLSIFDataResolverOLDDiagnosticsFunc{
			defaultHook: func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Diagnostics")
			},
		},
		HoverFunc: &GitBlobLSIFDataResolverOLDHoverFunc{
			defaultHook: func(context.Context, int, int) (string, types.Range, bool, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Hover")
			},
		},
		ImplementationsFunc: &GitBlobLSIFDataResolverOLDImplementationsFunc{
			defaultHook: func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Implementations")
			},
		},
		LSIFUploadsFunc: &GitBlobLSIFDataResolverOLDLSIFUploadsFunc{
			defaultHook: func(context.Context) ([]types.Dump, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.LSIFUploads")
			},
		},
		RangesFunc: &GitBlobLSIFDataResolverOLDRangesFunc{
			defaultHook: func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Ranges")
			},
		},
		ReferencesFunc: &GitBlobLSIFDataResolverOLDReferencesFunc{
			defaultHook: func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.References")
			},
		},
		StencilFunc: &GitBlobLSIFDataResolverOLDStencilFunc{
			defaultHook: func(context.Context) ([]types.Range, error) {
				panic("unexpected invocation of MockGitBlobLSIFDataResolverOLD.Stencil")
			},
		},
	}
}

// NewMockGitBlobLSIFDataResolverOLDFrom creates a new mock of the
// MockGitBlobLSIFDataResolverOLD interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitBlobLSIFDataResolverOLDFrom(i GitBlobLSIFDataResolverOLD) *MockGitBlobLSIFDataResolverOLD {
	return &MockGitBlobLSIFDataResolverOLD{
		DefinitionsFunc: &GitBlobLSIFDataResolverOLDDefinitionsFunc{
			defaultHook: i.Definitions,
		},
		DiagnosticsFunc: &GitBlobLSIFDataResolverOLDDiagnosticsFunc{
			defaultHook: i.Diagnostics,
		},
		HoverFunc: &GitBlobLSIFDataResolverOLDHoverFunc{
			defaultHook: i.Hover,
		},
		ImplementationsFunc: &GitBlobLSIFDataResolverOLDImplementationsFunc{
			defaultHook: i.Implementations,
		},
		LSIFUploadsFunc: &GitBlobLSIFDataResolverOLDLSIFUploadsFunc{
			defaultHook: i.LSIFUploads,
		},
		RangesFunc: &GitBlobLSIFDataResolverOLDRangesFunc{
			defaultHook: i.Ranges,
		},
		ReferencesFunc: &GitBlobLSIFDataResolverOLDReferencesFunc{
			defaultHook: i.References,
		},
		StencilFunc: &GitBlobLSIFDataResolverOLDStencilFunc{
			defaultHook: i.Stencil,
		},
	}
}

// GitBlobLSIFDataResolverOLDDefinitionsFunc describes the behavior when the
// Definitions method of the parent MockGitBlobLSIFDataResolverOLD instance
// is invoked.
type GitBlobLSIFDataResolverOLDDefinitionsFunc struct {
	defaultHook func(context.Context, int, int) ([]types.UploadLocation, error)
	hooks       []func(context.Context, int, int) ([]types.UploadLocation, error)
	history     []GitBlobLSIFDataResolverOLDDefinitionsFuncCall
	mutex       sync.Mutex
}

// Definitions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Definitions(v0 context.Context, v1 int, v2 int) ([]types.UploadLocation, error) {
	r0, r1 := m.DefinitionsFunc.nextHook()(v0, v1, v2)
	m.DefinitionsFunc.appendCall(GitBlobLSIFDataResolverOLDDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Definitions method
// of the parent MockGitBlobLSIFDataResolverOLD instance is invoked and the
// hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]types.UploadLocation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Definitions method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) PushHook(hook func(context.Context, int, int) ([]types.UploadLocation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]types.UploadLocation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) PushReturn(r0 []types.UploadLocation, r1 error) {
	f.PushHook(func(context.Context, int, int) ([]types.UploadLocation, error) {
		return r0, r1
	})
}

func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) nextHook() func(context.Context, int, int) ([]types.UploadLocation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) appendCall(r0 GitBlobLSIFDataResolverOLDDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitBlobLSIFDataResolverOLDDefinitionsFuncCall objects describing the
// invocations of this function.
func (f *GitBlobLSIFDataResolverOLDDefinitionsFunc) History() []GitBlobLSIFDataResolverOLDDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDDefinitionsFuncCall is an object that describes
// an invocation of method Definitions on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBlobLSIFDataResolverOLDDiagnosticsFunc describes the behavior when the
// Diagnostics method of the parent MockGitBlobLSIFDataResolverOLD instance
// is invoked.
type GitBlobLSIFDataResolverOLDDiagnosticsFunc struct {
	defaultHook func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error)
	hooks       []func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error)
	history     []GitBlobLSIFDataResolverOLDDiagnosticsFuncCall
	mutex       sync.Mutex
}

// Diagnostics delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Diagnostics(v0 context.Context, v1 int) ([]shared.DiagnosticAtUpload, int, error) {
	r0, r1, r2 := m.DiagnosticsFunc.nextHook()(v0, v1)
	m.DiagnosticsFunc.appendCall(GitBlobLSIFDataResolverOLDDiagnosticsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Diagnostics method
// of the parent MockGitBlobLSIFDataResolverOLD instance is invoked and the
// hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Diagnostics method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) PushHook(hook func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) SetDefaultReturn(r0 []shared.DiagnosticAtUpload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) PushReturn(r0 []shared.DiagnosticAtUpload, r1 int, r2 error) {
	f.PushHook(func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) nextHook() func(context.Context, int) ([]shared.DiagnosticAtUpload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) appendCall(r0 GitBlobLSIFDataResolverOLDDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitBlobLSIFDataResolverOLDDiagnosticsFuncCall objects describing the
// invocations of this function.
func (f *GitBlobLSIFDataResolverOLDDiagnosticsFunc) History() []GitBlobLSIFDataResolverOLDDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDDiagnosticsFuncCall is an object that describes
// an invocation of method Diagnostics on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.DiagnosticAtUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitBlobLSIFDataResolverOLDHoverFunc describes the behavior when the Hover
// method of the parent MockGitBlobLSIFDataResolverOLD instance is invoked.
type GitBlobLSIFDataResolverOLDHoverFunc struct {
	defaultHook func(context.Context, int, int) (string, types.Range, bool, error)
	hooks       []func(context.Context, int, int) (string, types.Range, bool, error)
	history     []GitBlobLSIFDataResolverOLDHoverFuncCall
	mutex       sync.Mutex
}

// Hover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Hover(v0 context.Context, v1 int, v2 int) (string, types.Range, bool, error) {
	r0, r1, r2, r3 := m.HoverFunc.nextHook()(v0, v1, v2)
	m.HoverFunc.appendCall(GitBlobLSIFDataResolverOLDHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the Hover method of the
// parent MockGitBlobLSIFDataResolverOLD instance is invoked and the hook
// queue is empty.
func (f *GitBlobLSIFDataResolverOLDHoverFunc) SetDefaultHook(hook func(context.Context, int, int) (string, types.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Hover method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDHoverFunc) PushHook(hook func(context.Context, int, int) (string, types.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDHoverFunc) SetDefaultReturn(r0 string, r1 types.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, int) (string, types.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDHoverFunc) PushReturn(r0 string, r1 types.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, int) (string, types.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *GitBlobLSIFDataResolverOLDHoverFunc) nextHook() func(context.Context, int, int) (string, types.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDHoverFunc) appendCall(r0 GitBlobLSIFDataResolverOLDHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBlobLSIFDataResolverOLDHoverFuncCall
// objects describing the invocations of this function.
func (f *GitBlobLSIFDataResolverOLDHoverFunc) History() []GitBlobLSIFDataResolverOLDHoverFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDHoverFuncCall is an object that describes an
// invocation of method Hover on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 types.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// GitBlobLSIFDataResolverOLDImplementationsFunc describes the behavior when
// the Implementations method of the parent MockGitBlobLSIFDataResolverOLD
// instance is invoked.
type GitBlobLSIFDataResolverOLDImplementationsFunc struct {
	defaultHook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)
	hooks       []func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)
	history     []GitBlobLSIFDataResolverOLDImplementationsFuncCall
	mutex       sync.Mutex
}

// Implementations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Implementations(v0 context.Context, v1 int, v2 int, v3 int, v4 string) ([]types.UploadLocation, string, error) {
	r0, r1, r2 := m.ImplementationsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ImplementationsFunc.appendCall(GitBlobLSIFDataResolverOLDImplementationsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Implementations
// method of the parent MockGitBlobLSIFDataResolverOLD instance is invoked
// and the hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) SetDefaultHook(hook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Implementations method of the parent MockGitBlobLSIFDataResolverOLD
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) PushHook(hook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) PushReturn(r0 []types.UploadLocation, r1 string, r2 error) {
	f.PushHook(func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
		return r0, r1, r2
	})
}

func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) nextHook() func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) appendCall(r0 GitBlobLSIFDataResolverOLDImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitBlobLSIFDataResolverOLDImplementationsFuncCall objects describing the
// invocations of this function.
func (f *GitBlobLSIFDataResolverOLDImplementationsFunc) History() []GitBlobLSIFDataResolverOLDImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDImplementationsFuncCall is an object that
// describes an invocation of method Implementations on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitBlobLSIFDataResolverOLDLSIFUploadsFunc describes the behavior when the
// LSIFUploads method of the parent MockGitBlobLSIFDataResolverOLD instance
// is invoked.
type GitBlobLSIFDataResolverOLDLSIFUploadsFunc struct {
	defaultHook func(context.Context) ([]types.Dump, error)
	hooks       []func(context.Context) ([]types.Dump, error)
	history     []GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall
	mutex       sync.Mutex
}

// LSIFUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) LSIFUploads(v0 context.Context) ([]types.Dump, error) {
	r0, r1 := m.LSIFUploadsFunc.nextHook()(v0)
	m.LSIFUploadsFunc.appendCall(GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LSIFUploads method
// of the parent MockGitBlobLSIFDataResolverOLD instance is invoked and the
// hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) SetDefaultHook(hook func(context.Context) ([]types.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LSIFUploads method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) PushHook(hook func(context.Context) ([]types.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) SetDefaultReturn(r0 []types.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) PushReturn(r0 []types.Dump, r1 error) {
	f.PushHook(func(context.Context) ([]types.Dump, error) {
		return r0, r1
	})
}

func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) nextHook() func(context.Context) ([]types.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) appendCall(r0 GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall objects describing the
// invocations of this function.
func (f *GitBlobLSIFDataResolverOLDLSIFUploadsFunc) History() []GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall is an object that describes
// an invocation of method LSIFUploads on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDLSIFUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBlobLSIFDataResolverOLDRangesFunc describes the behavior when the
// Ranges method of the parent MockGitBlobLSIFDataResolverOLD instance is
// invoked.
type GitBlobLSIFDataResolverOLDRangesFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error)
	hooks       []func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error)
	history     []GitBlobLSIFDataResolverOLDRangesFuncCall
	mutex       sync.Mutex
}

// Ranges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Ranges(v0 context.Context, v1 int, v2 int) ([]shared.AdjustedCodeIntelligenceRange, error) {
	r0, r1 := m.RangesFunc.nextHook()(v0, v1, v2)
	m.RangesFunc.appendCall(GitBlobLSIFDataResolverOLDRangesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Ranges method of the
// parent MockGitBlobLSIFDataResolverOLD instance is invoked and the hook
// queue is empty.
func (f *GitBlobLSIFDataResolverOLDRangesFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ranges method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDRangesFunc) PushHook(hook func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDRangesFunc) SetDefaultReturn(r0 []shared.AdjustedCodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDRangesFunc) PushReturn(r0 []shared.AdjustedCodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *GitBlobLSIFDataResolverOLDRangesFunc) nextHook() func(context.Context, int, int) ([]shared.AdjustedCodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDRangesFunc) appendCall(r0 GitBlobLSIFDataResolverOLDRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBlobLSIFDataResolverOLDRangesFuncCall
// objects describing the invocations of this function.
func (f *GitBlobLSIFDataResolverOLDRangesFunc) History() []GitBlobLSIFDataResolverOLDRangesFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDRangesFuncCall is an object that describes an
// invocation of method Ranges on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.AdjustedCodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBlobLSIFDataResolverOLDReferencesFunc describes the behavior when the
// References method of the parent MockGitBlobLSIFDataResolverOLD instance
// is invoked.
type GitBlobLSIFDataResolverOLDReferencesFunc struct {
	defaultHook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)
	hooks       []func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)
	history     []GitBlobLSIFDataResolverOLDReferencesFuncCall
	mutex       sync.Mutex
}

// References delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) References(v0 context.Context, v1 int, v2 int, v3 int, v4 string) ([]types.UploadLocation, string, error) {
	r0, r1, r2 := m.ReferencesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReferencesFunc.appendCall(GitBlobLSIFDataResolverOLDReferencesFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the References method of
// the parent MockGitBlobLSIFDataResolverOLD instance is invoked and the
// hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDReferencesFunc) SetDefaultHook(hook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// References method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDReferencesFunc) PushHook(hook func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDReferencesFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDReferencesFunc) PushReturn(r0 []types.UploadLocation, r1 string, r2 error) {
	f.PushHook(func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
		return r0, r1, r2
	})
}

func (f *GitBlobLSIFDataResolverOLDReferencesFunc) nextHook() func(context.Context, int, int, int, string) ([]types.UploadLocation, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDReferencesFunc) appendCall(r0 GitBlobLSIFDataResolverOLDReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitBlobLSIFDataResolverOLDReferencesFuncCall objects describing the
// invocations of this function.
func (f *GitBlobLSIFDataResolverOLDReferencesFunc) History() []GitBlobLSIFDataResolverOLDReferencesFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDReferencesFuncCall is an object that describes
// an invocation of method References on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitBlobLSIFDataResolverOLDStencilFunc describes the behavior when the
// Stencil method of the parent MockGitBlobLSIFDataResolverOLD instance is
// invoked.
type GitBlobLSIFDataResolverOLDStencilFunc struct {
	defaultHook func(context.Context) ([]types.Range, error)
	hooks       []func(context.Context) ([]types.Range, error)
	history     []GitBlobLSIFDataResolverOLDStencilFuncCall
	mutex       sync.Mutex
}

// Stencil delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBlobLSIFDataResolverOLD) Stencil(v0 context.Context) ([]types.Range, error) {
	r0, r1 := m.StencilFunc.nextHook()(v0)
	m.StencilFunc.appendCall(GitBlobLSIFDataResolverOLDStencilFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Stencil method of
// the parent MockGitBlobLSIFDataResolverOLD instance is invoked and the
// hook queue is empty.
func (f *GitBlobLSIFDataResolverOLDStencilFunc) SetDefaultHook(hook func(context.Context) ([]types.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stencil method of the parent MockGitBlobLSIFDataResolverOLD instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitBlobLSIFDataResolverOLDStencilFunc) PushHook(hook func(context.Context) ([]types.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBlobLSIFDataResolverOLDStencilFunc) SetDefaultReturn(r0 []types.Range, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBlobLSIFDataResolverOLDStencilFunc) PushReturn(r0 []types.Range, r1 error) {
	f.PushHook(func(context.Context) ([]types.Range, error) {
		return r0, r1
	})
}

func (f *GitBlobLSIFDataResolverOLDStencilFunc) nextHook() func(context.Context) ([]types.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBlobLSIFDataResolverOLDStencilFunc) appendCall(r0 GitBlobLSIFDataResolverOLDStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBlobLSIFDataResolverOLDStencilFuncCall
// objects describing the invocations of this function.
func (f *GitBlobLSIFDataResolverOLDStencilFunc) History() []GitBlobLSIFDataResolverOLDStencilFuncCall {
	f.mutex.Lock()
	history := make([]GitBlobLSIFDataResolverOLDStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBlobLSIFDataResolverOLDStencilFuncCall is an object that describes an
// invocation of method Stencil on an instance of
// MockGitBlobLSIFDataResolverOLD.
type GitBlobLSIFDataResolverOLDStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBlobLSIFDataResolverOLDStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBlobLSIFDataResolverOLDStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockGitserverClient struct {
	// CommitsExistFunc is an instance of a mock function object controlling
	// the behavior of the method CommitsExist.
	CommitsExistFunc *GitserverClientCommitsExistFunc
	// DiffPathFunc is an instance of a mock function object controlling the
	// behavior of the method DiffPath.
	DiffPathFunc *GitserverClientDiffPathFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) (r0 []bool, r1 error) {
				return
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) (r0 []*diff.Hunk, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsExist")
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
				panic("unexpected invocation of MockGitserverClient.DiffPath")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: i.CommitsExist,
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: i.DiffPath,
		},
	}
}

// GitserverClientCommitsExistFunc describes the behavior when the
// CommitsExist method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientCommitsExistFunc struct {
	defaultHook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	hooks       []func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	history     []GitserverClientCommitsExistFuncCall
	mutex       sync.Mutex
}

// CommitsExist delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsExist(v0 context.Context, v1 []gitserver.RepositoryCommit) ([]bool, error) {
	r0, r1 := m.CommitsExistFunc.nextHook()(v0, v1)
	m.CommitsExistFunc.appendCall(GitserverClientCommitsExistFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitsExist method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitsExistFunc) SetDefaultHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsExist method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientCommitsExistFunc) PushHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsExistFunc) SetDefaultReturn(r0 []bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsExistFunc) PushReturn(r0 []bool, r1 error) {
	f.PushHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsExistFunc) nextHook() func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsExistFunc) appendCall(r0 GitserverClientCommitsExistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitsExistFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitsExistFunc) History() []GitserverClientCommitsExistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsExistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsExistFuncCall is an object that describes an
// invocation of method CommitsExist on an instance of MockGitserverClient.
type GitserverClientCommitsExistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []gitserver.RepositoryCommit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientDiffPathFunc describes the behavior when the DiffPath
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientDiffPathFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	history     []GitserverClientDiffPathFuncCall
	mutex       sync.Mutex
}

// DiffPath delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) DiffPath(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 string, v5 string) ([]*diff.Hunk, error) {
	r0, r1 := m.DiffPathFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.DiffPathFunc.appendCall(GitserverClientDiffPathFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffPath method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientDiffPathFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffPath method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientDiffPathFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientDiffPathFunc) SetDefaultReturn(r0 []*diff.Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientDiffPathFunc) PushReturn(r0 []*diff.Hunk, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

func (f *GitserverClientDiffPathFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientDiffPathFunc) appendCall(r0 GitserverClientDiffPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientDiffPathFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientDiffPathFunc) History() []GitserverClientDiffPathFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientDiffPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientDiffPathFuncCall is an object that describes an invocation
// of method DiffPath on an instance of MockGitserverClient.
type GitserverClientDiffPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*diff.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockPolicyService is a mock implementation of the PolicyService interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockPolicyService struct {
	// GetRetentionPolicyOverviewFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetRetentionPolicyOverview.
	GetRetentionPolicyOverviewFunc *PolicyServiceGetRetentionPolicyOverviewFunc
}

// NewMockPolicyService creates a new mock of the PolicyService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockPolicyService() *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, types.Upload, bool, int, int64, string, time.Time) (r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockPolicyService creates a new mock of the PolicyService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPolicyService() *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
				panic("unexpected invocation of MockPolicyService.GetRetentionPolicyOverview")
			},
		},
	}
}

// NewMockPolicyServiceFrom creates a new mock of the MockPolicyService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockPolicyServiceFrom(i PolicyService) *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: i.GetRetentionPolicyOverview,
		},
	}
}

// PolicyServiceGetRetentionPolicyOverviewFunc describes the behavior when
// the GetRetentionPolicyOverview method of the parent MockPolicyService
// instance is invoked.
type PolicyServiceGetRetentionPolicyOverviewFunc struct {
	defaultHook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)
	hooks       []func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)
	history     []PolicyServiceGetRetentionPolicyOverviewFuncCall
	mutex       sync.Mutex
}

// GetRetentionPolicyOverview delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPolicyService) GetRetentionPolicyOverview(v0 context.Context, v1 types.Upload, v2 bool, v3 int, v4 int64, v5 string, v6 time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
	r0, r1, r2 := m.GetRetentionPolicyOverviewFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetRetentionPolicyOverviewFunc.appendCall(PolicyServiceGetRetentionPolicyOverviewFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetRetentionPolicyOverview method of the parent MockPolicyService
// instance is invoked and the hook queue is empty.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) SetDefaultHook(hook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRetentionPolicyOverview method of the parent MockPolicyService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) PushHook(hook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) SetDefaultReturn(r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) PushReturn(r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.PushHook(func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

func (f *PolicyServiceGetRetentionPolicyOverviewFunc) nextHook() func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PolicyServiceGetRetentionPolicyOverviewFunc) appendCall(r0 PolicyServiceGetRetentionPolicyOverviewFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PolicyServiceGetRetentionPolicyOverviewFuncCall objects describing the
// invocations of this function.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) History() []PolicyServiceGetRetentionPolicyOverviewFuncCall {
	f.mutex.Lock()
	history := make([]PolicyServiceGetRetentionPolicyOverviewFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PolicyServiceGetRetentionPolicyOverviewFuncCall is an object that
// describes an invocation of method GetRetentionPolicyOverview on an
// instance of MockPolicyService.
type PolicyServiceGetRetentionPolicyOverviewFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Upload
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int64
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.RetentionPolicyMatchCandidate
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PolicyServiceGetRetentionPolicyOverviewFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PolicyServiceGetRetentionPolicyOverviewFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockUploadsService struct {
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *UploadsServiceGetAuditLogsForUploadFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *UploadsServiceGetListTagsFunc
	// GetUploadDocumentsForPathFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadDocumentsForPath.
	GetUploadDocumentsForPathFunc *UploadsServiceGetUploadDocumentsForPathFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *UploadsServiceGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []types.UploadLog, r1 error) {
				return
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) (r0 []string, r1 int, r2 error) {
				return
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, types.GetUploadsOptions) (r0 []types.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Upload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]types.UploadLog, error) {
				panic("unexpected invocation of MockUploadsService.GetAuditLogsForUpload")
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockUploadsService.GetListTags")
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) ([]string, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadDocumentsForPath")
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: i.GetUploadDocumentsForPath,
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
	}
}

// UploadsServiceGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]types.UploadLog, error)
	hooks       []func(context.Context, int) ([]types.UploadLog, error)
	history     []UploadsServiceGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]types.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(UploadsServiceGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []types.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushReturn(r0 []types.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]types.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) appendCall(r0 UploadsServiceGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAuditLogsForUploadFunc) History() []UploadsServiceGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAuditLogsForUploadFuncCall is an object that describes
// an invocation of method GetAuditLogsForUpload on an instance of
// MockUploadsService.
type UploadsServiceGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetListTagsFunc describes the behavior when the GetListTags
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []UploadsServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(UploadsServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetListTagsFunc) appendCall(r0 UploadsServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetListTagsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetListTagsFunc) History() []UploadsServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of MockUploadsService.
type UploadsServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadDocumentsForPathFunc describes the behavior when
// the GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked.
type UploadsServiceGetUploadDocumentsForPathFunc struct {
	defaultHook func(context.Context, int, string) ([]string, int, error)
	hooks       []func(context.Context, int, string) ([]string, int, error)
	history     []UploadsServiceGetUploadDocumentsForPathFuncCall
	mutex       sync.Mutex
}

// GetUploadDocumentsForPath delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadDocumentsForPath(v0 context.Context, v1 int, v2 string) ([]string, int, error) {
	r0, r1, r2 := m.GetUploadDocumentsForPathFunc.nextHook()(v0, v1, v2)
	m.GetUploadDocumentsForPathFunc.appendCall(UploadsServiceGetUploadDocumentsForPathFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultReturn(r0 []string, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushReturn(r0 []string, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) nextHook() func(context.Context, int, string) ([]string, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) appendCall(r0 UploadsServiceGetUploadDocumentsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetUploadDocumentsForPathFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) History() []UploadsServiceGetUploadDocumentsForPathFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadDocumentsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadDocumentsForPathFuncCall is an object that
// describes an invocation of method GetUploadDocumentsForPath on an
// instance of MockUploadsService.
type UploadsServiceGetUploadDocumentsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsFunc describes the behavior when the GetUploads
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetUploadsFunc struct {
	defaultHook func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error)
	hooks       []func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error)
	history     []UploadsServiceGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploads(v0 context.Context, v1 types.GetUploadsOptions) ([]types.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(UploadsServiceGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetUploadsFunc) SetDefaultHook(hook func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsFunc) PushHook(hook func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsFunc) SetDefaultReturn(r0 []types.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsFunc) PushReturn(r0 []types.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadsFunc) nextHook() func(context.Context, types.GetUploadsOptions) ([]types.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsFunc) appendCall(r0 UploadsServiceGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadsFunc) History() []UploadsServiceGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsFuncCall is an object that describes an
// invocation of method GetUploads on an instance of MockUploadsService.
type UploadsServiceGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Upload, error)
	hooks       []func(context.Context, ...int) ([]types.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]types.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []types.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []types.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
